import asyncio

tasks_dependencies = {
    "Подготовка_окружения": {
        "этапы": [
            {"название": "Настройка виртуального окружения", "время": 1},
            {"название": "Установка базовых зависимостей", "время": 2},
            {"название": "Настройка системы контроля версий", "время": 3},
            {"название": "Проверка сетевых настроек", "время": 4},
            {"название": "Клонирование основной ветки", "время": 4},
            {"название": "Проверка последних изменений", "время": 6},
            {"название": "Проверка локальных зависимостей", "время": 8}
        ]
    },
    "Проверка_зависимостей": {
        "этапы": [
            {"название": "Обновление устаревших зависимостей", "время": 1},
            {"название": "Установка новых зависимостей", "время": 3},
            {"название": "Предварительная очистка", "время": 6},
            {"название": "Компиляция исходного кода ядра", "время": 4},
            {"название": "Логирование результатов компиляции", "время": 7}
        ]
    },
    "Компиляция_модулей": {
        "этапы": [
            {"название": "Компиляция модуля A", "время": 3},
            {"название": "Компиляция модуля B", "время": 4},
            {"название": "Тестирование модулей на совместимость", "время": 1},
            {"название": "Инициализация тестового окружения", "время": 3},
            {"название": "Тестирование модуля A", "время": 1}
        ]
    },
    "Сборка_БД": {
        "этапы": [
            {"название": "Создание структуры БД", "время": 2},
            {"название": "Наполнение начальными данными", "время": 6},
            {"название": "Импорт данных пользователей", "время": 2},
            {"название": "Импорт транзакционных данных", "время": 1},
            {"название": "Подготовка пакетов для релиза", "время": 4}
        ]
    },
    "Развертывание_релиза": {
        "этапы": [
            {"название": "Создание инструкций для установки", "время": 7},
            {"название": "Финальное тестирование релиза", "время": 1},
            {"название": "Развертывание сборки", "время": 4},
            {"название": "Проверка работоспособности сервисов", "время": 6},
            {"название": "Подготовка релизных заметок", "время": 6},
            {"название": "Финализация документации", "время": 4},
            {"название": "Размещение релиза на сервере обновлений", "время": 1},
            {"название": "Подготовка мероприятия", "время": 3},
            {"название": "Объявление об успешном релизе", "время": 4}
        ]
    }
}


# Словарь tasks_dependencies = {} вшит в задачу, вставлять его в решение не нужно.
async def execute_subtask(task_name, duration):
    if duration > 5:
        await asyncio.sleep(5)
        raise Exception(f'Подзадача: {task_name} не успела выполниться в срок, за {duration} сек.')
    await asyncio.sleep(duration)
    return f"Подзадача: {task_name} успела выполниться в срок, за {duration} сек."


async def execute_task(task_name, subtasks):
    task_results = {}
    task_results[task_name] = await asyncio.gather(
        *[execute_subtask(subtask["название"], subtask["время"]) for subtask in subtasks], return_exceptions=True)
    return task_results


async def main():
    def check_exception(result_list):
        for result in result_list:
            if isinstance(result, Exception):
                return True

    total_results = await asyncio.gather(
        *[execute_task(task_name, task_dict["этапы"]) for task_name, task_dict in tasks_dependencies.items()])

    for task_results in total_results:
        for task_name, subtask_dict in task_results.items():
            print('*' * 50)
            for subtask_res in subtask_dict:
                print(subtask_res)

            if check_exception(subtask_dict):
                print(
                    f'Задача: {task_name} не выполнилась в срок, '
                    f'т.к. одна или несколько подзадач заняли слишком много времени.')
            else:
                print(f'Задача: {task_name} = все подзадачи выполнены')


asyncio.run(main())
